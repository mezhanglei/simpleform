export default [
  /* POLYFILL START */
  "(function() {",
  "function createArrayMethod_(name, func) {",
  "Object.defineProperty(func, 'name', {value: name});",
  "Object.defineProperty(Array.prototype, name,",
  "{configurable: true, writable: true, value: func});",
  "}",

  "createArrayMethod_('pop',",
  "function() {",
  "if (!this) throw TypeError();",
  "var o = Object(this), len = o.length >>> 0;",
  "if (!len || len < 0) {",
  "o.length = 0;",
  "return undefined;",
  "}",
  "len--;",
  "var x = o[len];",
  "delete o[len];", // Needed for non-arrays.
  "o.length = len;",
  "return x;",
  "}",
  ");",

  "createArrayMethod_('push',",
  "function(var_args) {",
  "if (!this) throw TypeError();",
  "var o = Object(this), len = o.length >>> 0;",
  "for (var i = 0; i < arguments.length; i++) {",
  "o[len] = arguments[i];",
  "len++;",
  "}",
  "o.length = len;",
  "return len;",
  "}",
  ");",

  "createArrayMethod_('shift',",
  "function() {",
  "if (!this) throw TypeError();",
  "var o = Object(this), len = o.length >>> 0;",
  "if (!len || len < 0) {",
  "o.length = 0;",
  "return undefined;",
  "}",
  "var value = o[0];",
  "for (var i = 0; i < len - 1; i++) {",
  "if ((i + 1) in o) {",
  "o[i] = o[i + 1];",
  "} else {",
  "delete o[i];",
  "}",
  "}",
  "delete o[i];", // Needed for non-arrays.
  "o.length = len - 1;",
  "return value;",
  "}",
  ");",

  "createArrayMethod_('unshift',",
  "function(var_args) {",
  "if (!this) throw TypeError();",
  "var o = Object(this), len = o.length >>> 0;",
  "if (!len || len < 0) {",
  "len = 0;",
  "}",
  "for (var i = len - 1; i >= 0; i--) {",
  "if (i in o) {",
  "o[i + arguments.length] = o[i];",
  "} else {",
  "delete o[i + arguments.length];",
  "}",
  "}",
  "for (var i = 0; i < arguments.length; i++) {",
  "o[i] = arguments[i];",
  "}",
  "return (o.length = len + arguments.length);",
  "}",
  ");",

  "createArrayMethod_('reverse',",
  "function() {",
  "if (!this) throw TypeError();",
  "var o = Object(this), len = o.length >>> 0;",
  "if (!len || len < 2) {",
  "return o;", // Not an array, or too short to reverse.
  "}",
  "for (var i = 0; i < len / 2 - 0.5; i++) {",
  "var x = o[i];",
  "var hasX = i in o;",
  "if ((len - i - 1) in o) {",
  "o[i] = o[len - i - 1];",
  "} else {",
  "delete o[i];",
  "}",
  "if (hasX) {",
  "o[len - i - 1] = x;",
  "} else {",
  "delete o[len - i - 1];",
  "}",
  "}",
  "return o;",
  "}",
  ");",

  "createArrayMethod_('indexOf',",
  "function(searchElement, fromIndex) {",
  "if (!this) throw TypeError();",
  "var o = Object(this), len = o.length >>> 0;",
  "var n = fromIndex | 0;",
  "if (!len || n >= len) {",
  "return -1;",
  "}",
  "var i = Math.max(n >= 0 ? n : len - Math.abs(n), 0);",
  "while (i < len) {",
  "if (i in o && o[i] === searchElement) {",
  "return i;",
  "}",
  "i++;",
  "}",
  "return -1;",
  "}",
  ");",

  "createArrayMethod_('lastIndexOf',",
  "function(searchElement, fromIndex) {",
  "if (!this) throw TypeError();",
  "var o = Object(this), len = o.length >>> 0;",
  "if (!len) {",
  "return -1;",
  "}",
  "var n = len - 1;",
  "if (arguments.length > 1) {",
  "n = fromIndex | 0;",
  "if (n) {",
  "n = (n > 0 || -1) * Math.floor(Math.abs(n));",
  "}",
  "}",
  "var i = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);",
  "while (i >= 0) {",
  "if (i in o && o[i] === searchElement) {",
  "return i;",
  "}",
  "i--;",
  "}",
  "return -1;",
  "}",
  ");",

  "createArrayMethod_('slice',",
  "function(start, end) {",
  "if (!this) throw TypeError();",
  "var o = Object(this), len = o.length >>> 0;",
  // Handle negative value for "start"
  "start |= 0;",
  "start = (start >= 0) ? start : Math.max(0, len + start);",
  // Handle negative value for "end"
  "if (typeof end !== 'undefined') {",
  "if (end !== Infinity) {",
  "end |= 0;",
  "}",
  "if (end < 0) {",
  "end = len + end;",
  "} else {",
  "end = Math.min(end, len);",
  "}",
  "} else {",
  "end = len;",
  "}",
  "var size = end - start;",
  "var cloned = new Array(size);",
  "for (var i = 0; i < size; i++) {",
  "if ((start + i) in o) {",
  "cloned[i] = o[start + i];",
  "}",
  "}",
  "return cloned;",
  "}",
  ");",

  "createArrayMethod_('splice',",
  "function(start, deleteCount, var_args) {",
  "if (!this) throw TypeError();",
  "var o = Object(this), len = o.length >>> 0;",
  "start |= 0;",
  "if (start < 0) {",
  "start = Math.max(len + start, 0);",
  "} else {",
  "start = Math.min(start, len);",
  "}",
  "if (arguments.length < 2) {",
  "deleteCount = len - start;",
  "} else {",
  "deleteCount |= 0;",
  "deleteCount = Math.max(0, Math.min(deleteCount, len - start));",
  "}",
  "var removed = [];",
  // Remove specified elements.
  "for (var i = start; i < start + deleteCount; i++) {",
  "if (i in o) {",
  "removed.push(o[i]);",
  "} else {",
  "removed.length++;",
  "}",
  "if ((i + deleteCount) in o) {",
  "o[i] = o[i + deleteCount];",
  "} else {",
  "delete o[i];",
  "}",
  "}",
  // Move other element to fill the gap.
  "for (var i = start + deleteCount; i < len - deleteCount; i++) {",
  "if ((i + deleteCount) in o) {",
  "o[i] = o[i + deleteCount];",
  "} else {",
  "delete o[i];",
  "}",
  "}",
  // Delete superfluous properties.
  "for (var i = len - deleteCount; i < len; i++) {",
  "delete o[i];",
  "}",
  "len -= deleteCount;",
  // Insert specified items.
  "if (arguments.length > 2) {",
  "var arl = arguments.length - 2;",
  "for (var i = len - 1; i >= start; i--) {",
  "if (i in o) {",
  "o[i + arl] = o[i];",
  "} else {",
  "delete o[i + arl];",
  "}",
  "}",
  "len += arl;",
  "for (var i = 2; i < arguments.length; i++) {",
  "o[start + i - 2] = arguments[i];",
  "}",
  "}",
  "o.length = len;",
  "return removed;",
  "}",
  ");",

  "createArrayMethod_('concat',",
  "function(var_args) {",
  "if (!this) throw TypeError();",
  "var o = Object(this);",
  "var cloned = [];",
  "for (var i = -1; i < arguments.length; i++) {",
  "var value = (i === -1) ? o : arguments[i];",
  "if (Array.isArray(value)) {",
  "for (var j = 0, l = value.length; j < l; j++) {",
  "if (j in value) {",
  "cloned.push(value[j]);",
  "} else {",
  "cloned.length++;",
  "}",
  "}",
  "} else {",
  "cloned.push(value);",
  "}",
  "}",
  "return cloned;",
  "}",
  ");",

  "createArrayMethod_('join',",
  "function(opt_separator) {",
  "if (!this) throw TypeError();",
  "var o = Object(this), len = o.length >>> 0;",
  "var sep = typeof opt_separator === 'undefined' ?",
  "',' : ('' + opt_separator);",
  "var str = '';",
  "for (var i = 0; i < len; i++) {",
  "if (i && sep) str += sep;",
  "str += (o[i] === null || o[i] === undefined) ? '' : o[i];",
  "}",
  "return str;",
  "}",
  ");",

  // Polyfill copied from:
  // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/every
  "createArrayMethod_('every',",
  "function(callback, thisArg) {",
  "if (!this || typeof callback !== 'function') throw TypeError();",
  "var t, k = 0;",
  "var o = Object(this), len = o.length >>> 0;",
  "if (arguments.length > 1) t = thisArg;",
  "while (k < len) {",
  "if (k in o && !callback.call(t, o[k], k, o)) return false;",
  "k++;",
  "}",
  "return true;",
  "}",
  ");",

  // Polyfill copied from:
  // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
  "createArrayMethod_('filter',",
  "function(callback, var_args) {",
  "if (!this || typeof callback !== 'function') throw TypeError();",
  "var o = Object(this), len = o.length >>> 0;",
  "var res = [];",
  "var thisArg = arguments.length >= 2 ? arguments[1] : void 0;",
  "for (var i = 0; i < len; i++) {",
  "if (i in o) {",
  "var val = o[i];",
  "if (callback.call(thisArg, val, i, o)) res.push(val);",
  "}",
  "}",
  "return res;",
  "}",
  ");",

  // Polyfill copied from:
  // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
  "createArrayMethod_('forEach',",
  "function(callback, thisArg) {",
  "if (!this || typeof callback !== 'function') throw TypeError();",
  "var t, k = 0;",
  "var o = Object(this), len = o.length >>> 0;",
  "if (arguments.length > 1) t = thisArg;",
  "while (k < len) {",
  "if (k in o) callback.call(t, o[k], k, o);",
  "k++;",
  "}",
  "}",
  ");",

  // Polyfill copied from:
  // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/map
  "createArrayMethod_('map',",
  "function(callback, thisArg) {",
  "if (!this || typeof callback !== 'function') throw TypeError();",
  "var t, k = 0;",
  "var o = Object(this), len = o.length >>> 0;",
  "if (arguments.length > 1) t = thisArg;",
  "var a = new Array(len);",
  "while (k < len) {",
  "if (k in o) a[k] = callback.call(t, o[k], k, o);",
  "k++;",
  "}",
  "return a;",
  "}",
  ");",

  // Polyfill copied from:
  // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
  "createArrayMethod_('reduce',",
  "function(callback /*, initialValue*/) {",
  "if (!this || typeof callback !== 'function') throw TypeError();",
  "var o = Object(this), len = o.length >>> 0;",
  "var k = 0, value;",
  "if (arguments.length === 2) {",
  "value = arguments[1];",
  "} else {",
  "while (k < len && !(k in o)) k++;",
  "if (k >= len) {",
  "throw TypeError('Reduce of empty array with no initial value');",
  "}",
  "value = o[k++];",
  "}",
  "for (; k < len; k++) {",
  "if (k in o) value = callback(value, o[k], k, o);",
  "}",
  "return value;",
  "}",
  ");",

  // Polyfill copied from:
  // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight
  "createArrayMethod_('reduceRight',",
  "function(callback /*, initialValue*/) {",
  "if (!this || typeof callback !== 'function') throw TypeError();",
  "var o = Object(this), len = o.length >>> 0;",
  "var k = len - 1, value;",
  "if (arguments.length >= 2) {",
  "value = arguments[1];",
  "} else {",
  "while (k >= 0 && !(k in o)) k--;",
  "if (k < 0) {",
  "throw TypeError('Reduce of empty array with no initial value');",
  "}",
  "value = o[k--];",
  "}",
  "for (; k >= 0; k--) {",
  "if (k in o) value = callback(value, o[k], k, o);",
  "}",
  "return value;",
  "}",
  ");",

  // Polyfill copied from:
  // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/some
  "createArrayMethod_('some',",
  "function(callback /*, thisArg*/) {",
  "if (!this || typeof callback !== 'function') throw TypeError();",
  "var o = Object(this), len = o.length >>> 0;",
  "var thisArg = arguments.length >= 2 ? arguments[1] : void 0;",
  "for (var i = 0; i < len; i++) {",
  "if (i in o && callback.call(thisArg, o[i], i, o)) return true;",
  "}",
  "return false;",
  "}",
  ");",

  "createArrayMethod_('sort',",
  "function(opt_comp) {", // Bubble sort!
  "if (!this) throw TypeError();",
  "if (typeof opt_comp !== 'function') {",
  "opt_comp = undefined;",
  "}",
  "for (var i = 0; i < this.length; i++) {",
  "var changes = 0;",
  "for (var j = 0; j < this.length - i - 1; j++) {",
  "if (opt_comp ? (opt_comp(this[j], this[j + 1]) > 0) :",
  "(String(this[j]) > String(this[j + 1]))) {",
  "var swap = this[j];",
  "var hasSwap = j in this;",
  "if ((j + 1) in this) {",
  "this[j] = this[j + 1];",
  "} else {",
  "delete this[j];",
  "}",
  "if (hasSwap) {",
  "this[j + 1] = swap;",
  "} else {",
  "delete this[j + 1];",
  "}",
  "changes++;",
  "}",
  "}",
  "if (!changes) break;",
  "}",
  "return this;",
  "}",
  ");",

  "createArrayMethod_('toLocaleString',",
  "function() {",
  "if (!this) throw TypeError();",
  "var o = Object(this), len = o.length >>> 0;",
  "var out = [];",
  "for (var i = 0; i < len; i++) {",
  "out[i] = (o[i] === null || o[i] === undefined) ? '' : o[i].toLocaleString();",
  "}",
  "return out.join(',');",
  "}",
  ");",
  "})();",
  ""
  /* POLYFILL END */
];
